name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: "üîß Test"
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Run tests with coverage
      run: |
        python -m coverage run -m unittest discover -s tests -p "test_*.py"
        python -m coverage report
        python -m coverage html
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/
        retention-days: 30

  lint:
    name: "üìù Lint"
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Install flake8
      run: pip install flake8
    - name: Run flake8 linting
      run: flake8 . --count --show-source --statistics --max-line-length=120 --ignore=E265,E501,W293,W391,E402,E114,W292,E226

  security:
    name: "üîí Security"
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Install security tools
      run: pip install bandit safety
    - name: Run bandit security scan
      run: bandit -r . -f html -o bandit_report.html
    - name: Run safety check
      run: safety check --json --output safety_report.json || true
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit_report.html
          safety_report.json
        retention-days: 30

  notify:
    name: "üì¢ Notify"
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: always()
    steps:
    - name: Send Telegram notification
      run: |
        if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.lint.result }}" == "success" ] && [ "${{ needs.security.result }}" == "success" ]; then
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d text="‚úÖ Pipeline passed! All checks completed successfully."
        else
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d text="‚ùå Pipeline failed! Test: ${{ needs.test.result }}, Lint: ${{ needs.lint.result }}, Security: ${{ needs.security.result }} - Check GitHub Actions"
        fi